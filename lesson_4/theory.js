// ----------------------------------------Lesson4

function outputMessage() {
  console.log('Hello World!'); // При таком объявлении функции происходит всплытие данных и, если вызвать функцию до объявления, то все будет работать
}
outputMessage();

const consoleMessage = function () { // При таком объявлении не будет работать, если вызвать функцию раньше
  console.log('Hello friend!');
}
consoleMessage();

const alertMessage = new Function('alert("Hi!")');
alertMessage();

function outputMessage(name, surname, age) {
  console.log('Hello, I am ' + name + ' ' + surname + '. My age: ' + age); // name, surname, age - параметр функции(переменная, в которую вкладывается значение)
}
outputMessage('Dima', 'Yarasheuski', 24);

const sum = function (a, b) {
  let result = a + b;
  console.log(result); // Переменная, которая внутри функции, видна ТОЛЬКО в функции.
}
sum(5, 4);

let res = 0;

const sum2 = function (a, b) {
  let res = a + b;  // Если переменная объявлена до фукнции, а в ней изменяется, то она будет видно и вне функции.
}

console.log(res); // Будет 0, так как функция срабатывает только после ее вызова.
sum2(1, 4);
console.log(res);

const sum3 = function (a, b, c) {
  return a + b + c;
}

let res3 = sum3(3, 4, 4, 23, 13); // Оператор return возрвращает значение из фукнции, если бы его не было, то функция не возвращала бы ничего(выполнила внутри себя условия и не вернула бы значение)
console.log(res3); // Если аргументов больше, чем параметров, то все равно будет использовано то количество, сколько параметров.
// После return код не выполняется
// Любая функция, в которой после слова function нет имени, является анонимной. Она может иметь имя, если ее присвоить переменной, но все равно относится к анонимным

// Функция обратного вызова: если параметром функции является другая функция(callback), то фукнция-параметр явлеяется функцией обратного вызова:
const doNum = function (a, b, callback) {
  if (typeof a === num && typeof b === num) { // Если выполняется условие(прописанное в функции doNum), то передаются значения функции обратного вызова(callback)
    callback(a, b);
  }
};

doNum(10, 15, function (a, b) { // При вызове функции передаются числа и анонимная функция, которая принимает переменные
  console.log(a + b);
});

// Можно передать также именованную функцию:

function mult(a, b) {
  console.log(a * b);
};

doNum(4, 5, mult);

// Детерминированная функция - функция, которая зависит только от входных данных
// Чистая функция не должна изменять входные данные и все что вне этой функции
/*
function foo(a, b) { // Чистая функция, так как она не влияет ни на что вокруг и делает действия только с данными внутри
  const sum = a + b; 
  return sum;
};
console.log(foo(2, 4));
*/

let x = 5;  // Функция перестала быть чистой, так как она поменяла переменную x(был 5, а стал 11)
console.log(x);
function foo(a, b) {
  const sum = a + b;
  x += sum;
  return sum;
};
console.log(foo(2, 4));
console.log(x);
// Даже если добавить console.log, функция перестает быть чистой, так как она имеет побочный эффект на окружение(вывод в консоль)